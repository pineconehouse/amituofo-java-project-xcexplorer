package com.amituofo.xcexplorer.entry.plugin.hitachi.hcp;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.InputStream;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.swing.DefaultComboBoxModel;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JEditorPane;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTextField;
import javax.swing.JToolBar;

import org.apache.batik.util.gui.xmleditor.XMLTextEditor;

import com.amituofo.common.ui.util.UIUtils;
import com.amituofo.xcexplorer.core.global.GlobalAction;
import com.amituofo.xcexplorer.core.global.GlobalIcons;
import com.amituofo.xcexplorer.core.global.GlobalResource;
import com.amituofo.xcexplorer.core.global.SystemConfig;
import com.amituofo.xcexplorer.core.global.SystemConfigKeys;
import com.amituofo.xcexplorer.entry.plugin.hitachi.hcp.model.HCPObjectMetadataListModel;
import com.amituofo.xcexplorer.entry.plugin.osd.core.ui.OSDObjectFunctionPanel;
import com.amituofo.xcexplorer.task.util.TaskUtils;
import com.amituofo.xfs.plugin.fs.objectstorage.hcp.item.HCPFileItem;
import com.amituofo.xfs.plugin.fs.objectstorage.hcp.item.HCPMetadataItem;
import com.hitachivantara.common.ex.ServiceException;
import com.hitachivantara.common.util.FormatUtils;
import com.hitachivantara.common.util.StreamUtils;
import com.hitachivantara.common.util.StringUtils;
import com.hitachivantara.hcp.standard.model.metadata.HCPMetadataSummary;
import com.jgoodies.forms.layout.ColumnSpec;
import com.jgoodies.forms.layout.FormLayout;
import com.jgoodies.forms.layout.FormSpecs;
import com.jgoodies.forms.layout.RowSpec;

public class HCPCustomMetadataFuncPanel2 extends OSDObjectFunctionPanel<HCPFileItem> {
	private HCPObjectMetadataListModel model;

	private JTextField textField_Hash;
	private JTextField textField_HashAlgo;
	private JTextField textField_ContentType;
	private JTextField textField_ChangeTime;
	private JTextField textField_Size;
	private JEditorPane metaContentText;

	private HCPMetadataItem currentMeta = null;
	private byte[] currentMetaContentInBytes = null;

	private JComboBox<String> encodeCombox;
	// private JButton btnSave;
	private JComboBox<HCPMetadataItem> list;
	// private JButton btnNew;
	private List<JComponent> components = new ArrayList<JComponent>();

	public HCPCustomMetadataFuncPanel2() {
		model = new HCPObjectMetadataListModel();

		JSplitPane splitPane = new JSplitPane();
		splitPane.setResizeWeight(0.06);
		add(splitPane, BorderLayout.CENTER);

		JPanel panel_4 = new JPanel();
		splitPane.setLeftComponent(panel_4);
		panel_4.setLayout(new BorderLayout(0, 0));

		JPanel panel_3 = new JPanel();
		panel_4.add(panel_3, BorderLayout.NORTH);
		panel_3.setLayout(new FormLayout(
				new ColumnSpec[] { FormSpecs.RELATED_GAP_COLSPEC,
						FormSpecs.PREF_COLSPEC,
						FormSpecs.LABEL_COMPONENT_GAP_COLSPEC,
						ColumnSpec.decode("86px:grow"),
						FormSpecs.RELATED_GAP_COLSPEC,
						FormSpecs.PREF_COLSPEC,
						FormSpecs.RELATED_GAP_COLSPEC,
						ColumnSpec.decode("141px:grow"),
						FormSpecs.RELATED_GAP_COLSPEC, },
				new RowSpec[] { FormSpecs.RELATED_GAP_ROWSPEC,
						RowSpec.decode("top:14px"),
						FormSpecs.RELATED_GAP_ROWSPEC,
						FormSpecs.PREF_ROWSPEC,
						FormSpecs.RELATED_GAP_ROWSPEC,
						FormSpecs.PREF_ROWSPEC,
						FormSpecs.RELATED_GAP_ROWSPEC,
						FormSpecs.PREF_ROWSPEC,
						FormSpecs.RELATED_GAP_ROWSPEC,
						FormSpecs.PREF_ROWSPEC, }));

		JLabel lblNewLabel_3 = new JLabel("Metadata:");
		panel_3.add(lblNewLabel_3, "2, 2, fill, top");

		list = new JComboBox<HCPMetadataItem>();
		panel_3.add(list, "2, 4, 7, 1, fill, fill");
		list.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				HCPMetadataItem meta = (HCPMetadataItem) list.getSelectedItem();
				if (meta != null) {
					showContent(meta);
				}
			}
		});
		// list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		list.setModel(model);

		JLabel lblNewLabel_7 = new JLabel("Size:");
		panel_3.add(lblNewLabel_7, "2, 6, right, center");

		textField_Size = new JTextField();
		textField_Size.setEditable(false);
		panel_3.add(textField_Size, "4, 6, fill, fill");
		textField_Size.setColumns(10);

		JLabel lblNewLabel_6 = new JLabel("Changed Time:");
		panel_3.add(lblNewLabel_6, "6, 6, right, center");

		textField_ChangeTime = new JTextField();
		textField_ChangeTime.setEditable(false);
		panel_3.add(textField_ChangeTime, "8, 6, fill, fill");
		textField_ChangeTime.setColumns(10);

		JLabel lblNewLabel_4 = new JLabel("Content Type:");
		panel_3.add(lblNewLabel_4, "2, 8, left, center");

		textField_ContentType = new JTextField();
		textField_ContentType.setEditable(false);
		panel_3.add(textField_ContentType, "4, 8, fill, fill");
		textField_ContentType.setColumns(10);

		JLabel lblNewLabel_2 = new JLabel("Hash Algorithm:");
		panel_3.add(lblNewLabel_2, "6, 8, left, center");

		textField_HashAlgo = new JTextField();
		textField_HashAlgo.setEditable(false);
		panel_3.add(textField_HashAlgo, "8, 8, fill, fill");
		textField_HashAlgo.setColumns(10);

		JLabel lblNewLabel_1 = new JLabel("Hash:");
		panel_3.add(lblNewLabel_1, "2, 10, right, center");

		textField_Hash = new JTextField();
		textField_Hash.setEditable(false);
		panel_3.add(textField_Hash, "4, 10, 5, 1, fill, fill");
		textField_Hash.setColumns(10);

		JPanel panel_7 = new JPanel();
		panel_4.add(panel_7, BorderLayout.SOUTH);
		panel_7.setLayout(new BorderLayout(0, 0));

		JToolBar toolBar = new JToolBar();
		panel_7.add(toolBar);
		toolBar.setFloatable(false);
		JButton btnNew = new JButton("New");
		btnNew.setIcon(GlobalIcons.ICON_XXXX_16x16);
		btnNew.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (getWorkingItem() != null) {
					String metaName = GlobalAction.standard().inputMetadataName("");
					if (StringUtils.isNotEmpty(metaName)) {
						HCPMetadataItem newMeta = getWorkingItem().createMetadata(metaName);
						model.addElement(newMeta);
						list.setSelectedIndex(model.getSize() - 1);

						metaContentText.setText("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
					}
				}
			}
		});
		toolBar.add(btnNew);
		components.add(btnNew);

		JButton btnNewButton_1 = new JButton("Download");
		btnNewButton_1.setIcon(GlobalIcons.ICON_XXXX_16x16);
		btnNewButton_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				final HCPMetadataItem metaItem = (HCPMetadataItem) list.getSelectedItem();
				TaskUtils.confirmExecDownload2SingleFileTask(metaItem);
			}
		});
		toolBar.add(btnNewButton_1);
		components.add(btnNewButton_1);

		JButton btnNewButton_2 = new JButton("Delete");
		btnNewButton_2.setIcon(GlobalIcons.ICON_XXXX_16x16);
		btnNewButton_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (getWorkingItem() != null) {
					if (UIUtils.openInfoConfirm("Confirm", "Are you sure to delete selected meta ?")) {
						final HCPMetadataItem metaItem = (HCPMetadataItem) list.getSelectedItem();
						if (metaItem != null) {
							try {
								metaItem.delete();
							} catch (ServiceException e1) {
								UIUtils.openAndLogError("Error", "Failed to delete metadata " + metaItem.getName(), e1);
							}

							refresh();
						}
					}
				}
			}
		});
		toolBar.add(btnNewButton_2);
		components.add(btnNewButton_2);

		JPanel panel_5 = new JPanel();
		panel_5.setLayout(new BorderLayout(0, 0));
		splitPane.setRightComponent(panel_5);

		JPanel panel_8 = new JPanel();
		panel_5.add(panel_8, BorderLayout.SOUTH);
		panel_8.setLayout(new BorderLayout(0, 0));

		JScrollPane scrollPane_1 = new JScrollPane();
		panel_5.add(scrollPane_1, BorderLayout.CENTER);
		//
		metaContentText = new XMLTextEditor();
		// // metaContentText = new JEditorPane();
		// // metaContentText.setEditorKit(new XMLEditorKit());
		scrollPane_1.setViewportView(metaContentText);

		JPanel panel_9 = new JPanel();
		panel_5.add(panel_9, BorderLayout.NORTH);
		panel_9.setLayout(new BorderLayout(0, 0));

		JLabel lblNewLabel_5 = new JLabel("Content:");
		panel_9.add(lblNewLabel_5);

		JToolBar toolBar_1 = new JToolBar();
		panel_8.add(toolBar_1, BorderLayout.WEST);
		toolBar_1.setFloatable(false);
		JLabel lblNewLabel = new JLabel("Encoding:");
		toolBar_1.add(lblNewLabel);

		encodeCombox = new JComboBox<String>();
		encodeCombox.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				String metaContent = metaContentText.getText();
				if (metaContent != null && metaContent.length() > 0) {
					try {
						metaContent = new String(currentMetaContentInBytes, Charset.forName((String) encodeCombox.getSelectedItem()));

						metaContentText.setText(metaContent);
						metaContentText.setCaretPosition(0);
					} catch (Exception e1) {
						// e1.printStackTrace();
						UIUtils.openAndLogError("Error", "The character encoding is not supported.", e1);
						// GlobalContext.getLogger().error("The character encoding is not supported.", e1);
					}
				}
			}
		});
		// encodeCombox.setModel(new DefaultComboBoxModel<String>(Charset.availableCharsets().keySet().toArray(new
		// String[Charset.availableCharsets().size()])));
		encodeCombox.setModel(new DefaultComboBoxModel<String>(new String[] { "US-ASCII", "UTF-8", "UTF-16", "GBK", "GB2312", "BIG5", "Shift_JIS", "EUC-KR", "ISO-8859-1", }));
		encodeCombox.setSelectedItem("UTF-8");
		// encodeCombox.setEnabled(false);
		// encodeCombox.setEditable(false);
		toolBar_1.add(encodeCombox);
		// components.add(encodeCombox);

		JButton btnSave = new JButton("Save");
		btnSave.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (getWorkingItem() != null && currentMeta != null) {
					if (UIUtils.openInfoConfirm("Confirm", "Meta content will be override, Continue ?")) {
						try {
							currentMeta.write(currentMeta.getName(), StreamUtils.bytesToInputStream(metaContentText.getText().getBytes((String) encodeCombox.getSelectedItem())));

							int anIndex = list.getSelectedIndex();
							refresh();
							list.setSelectedIndex(anIndex);

						} catch (Exception e1) {
							// e1.printStackTrace();
							UIUtils.openAndLogError("Error", "Failed when saving metadata.", e1);
							// GlobalContext.getLogger().error("Failed when saving metadata " + currentMeta.getName(), e1);
						}
					}
				}
			}
		});

		btnSave.setIcon(GlobalIcons.ICON_XXXX_16x16);
		toolBar_1.add(btnSave);
		components.add(btnSave);

		// JCheckBox chckbxNewCheckBox = new JCheckBox("XML View");
		// chckbxNewCheckBox.addActionListener(new ActionListener() {
		// public void actionPerformed(ActionEvent e) {
		// if (chckbxNewCheckBox.isSelected()) {
		// String text = metaContentText.getText();
		// metaContentText.setEditorKit(new XMLEditorKit());
		// metaContentText.setText(text);
		// metaContentText.setCaretPosition(0);
		// } else {
		// String text = metaContentText.getText();
		// metaContentText.setEditorKit(null);
		// metaContentText.setText(text);
		// metaContentText.setCaretPosition(0);
		// }
		// }
		// });
		// panel_8.add(chckbxNewCheckBox, BorderLayout.EAST);

	}

	private void showContent(HCPMetadataItem meta) {
		this.currentMeta = meta;

		HCPMetadataSummary metaSummary = meta.getMetadataSummary();
		this.textField_Size.setText(metaSummary.getSize() != null ? FormatUtils.getPrintSize(metaSummary.getSize(), true) : "");
		this.textField_ChangeTime.setText(metaSummary.getChangeTime() != null ? SystemConfig.getInstance().getDateFormat(SystemConfigKeys.INTERFACE_DATETIME_FORMAT)
				.format(new Date(metaSummary.getChangeTime())) : "");
		this.textField_ContentType.setText(metaSummary.getContentType());
		this.textField_HashAlgo.setText(metaSummary.getHashAlgorithmName());
		this.textField_Hash.setText(metaSummary.getContentHash());

		if (metaSummary.getSize() != null) {
			final long SIZE_30MB = 1024 * 1024 * 10;
			if (metaSummary.getSize() <= SIZE_30MB) {
				try {
					InputStream in = meta.getContent();
					this.currentMetaContentInBytes = StreamUtils.inputStreamToBytes(in, true);
					this.metaContentText.setText(new String(currentMetaContentInBytes, Charset.forName((String) encodeCombox.getSelectedItem())));
					this.metaContentText.setCaretPosition(0);
				} catch (Exception e) {
					// e.printStackTrace();
					UIUtils.openAndLogError("Error", "Failed when loding metadata.", e);
					// GlobalContext.getLogger().error("Failed when loding metadata " + meta.getName(), e);
				}
			} else {
				GlobalResource.getLogger().warn("Metadata size too large for showing content. Please download to view. " + meta.getName());
				metaContentText.setText("Metadata size too large for showing content. Please download to view.");
			}
		}
	}

	@Override
	public String getTitle() {
		return "Metadata";
	}

	public void clear() {
		this.textField_Size.setText("");
		this.textField_ChangeTime.setText("");
		this.textField_ContentType.setText("");
		this.textField_HashAlgo.setText("");
		this.textField_Hash.setText("");
		this.metaContentText.setText("");
		this.currentMeta = null;
		this.currentMetaContentInBytes = null;
		model.removeAllElements();
	}

	@Override
	protected void showObjectInfo(HCPFileItem item) {
		try {
			clear();

			if (item.getStatus() == HCPFileItem.ITEM_STATUS_DELETED) {
				for (JComponent jComponent : components) {
					jComponent.setEnabled(false);
				}
				return;
			}

			for (JComponent jComponent : components) {
				jComponent.setEnabled(true);
			}

			int count = model.listMetadata(item);

			if (count == 0) {
				metaContentText.setText("!NO METADATA FOUND!");
			}
		} catch (ServiceException e) {
			GlobalResource.getLogger().error("Error when trying to get metadata from " + item.getPath(), e);
		}
	}

	@Override
	public Icon getIcon() {
		return GlobalIcons.ICON_META_TAB_16x16;
	}

}
